#include "parse_assignment.h"
#include <stdlib.h>
#include <stdio.h>


%%{
	machine assignment;

	action StartIdentifier {
		name_start 	= fpc;
	}

	action EndIdentifier {
		*name       = name_start;
		name_end 	= fpc;
	}

	action StartIntHex {
		value_start = fpc;
	}

	action EndIntHex {
		value_end 	= fpc;
		valout->type= VAL_INT;
	}

	action StartString {
		value_start = fpc;
	}

	action EndString {
		valout->string 	= value_start;	
		value_end 		= fpc;
		valout->type 	= VAL_STR;
	}

	#Top level machines
	identifier 	= alpha+;
	equals 		= '=';

	#Possible types of value
	integer 	= ('+'|'-')?[0-9]+;
	hexadecimal = '0x'xdigit+;
	#Embed the start and end actions into string to cut out quotes
	quote       = ('\'' | '\"');
	string		= quote ( (alnum|space)+  >StartString %EndString) quote;

	#Combine into machine for value, include start & end actions for hex
	value = (integer | hexadecimal ) >StartIntHex $EndIntHex
			 | string;

	#Finally, define the machine
	assignment := (identifier >StartIdentifier %EndIdentifier ). 
					space* . equals . space* . value;

}%%

int parse_assignment(char *start, char *end, char **name, struct valout_t *valout) {
	
	/* Write data for machine, suppress unused variables error and first_final */
	%%{
		write data noerror nofinal;
	}%%

	/* Define variables for ragel */
	int cs;
	char *p = start;
	char *pe = end;
	char *eof = pe;

	/* State end variables */
	char *value_start = NULL;
	char *value_end = NULL;
	char *name_start = NULL;
	char *name_end = NULL;

	/* Clear name type for error detection */
	*name = NULL;

	/* Clear value type for error detection */
	valout->type = VAL_NONE;

	/* Execute ragel machine, */
	/* WARNING: may return inside this if errors occur, see machine */
	%%{
		write init;
		write exec;
	}%%

	/* Null terminate strings at end of machine. */
	if (*name) {
		*name_end = '\0';
	}

	if (valout->type == VAL_STR) {
		*value_end = '\0';
	}
	else if (valout->type == VAL_INT) {
		value_end = '\0';
		/*If base = 0, strtol automatically converts hex or int */
		valout->integer = (int)strtol(value_start, NULL, 0); 
	} else { /* Unknown type */
		return -1;
	}

	return 0; /* Success */

	/* HACK: SUPPRESS COMPILER WARNINGS, SHOULD NEVER RUN AS AFTER RETURN */
	eof = pe;
	cs = assignment_en_assignment; /* Generated by ragel but unused */
}
